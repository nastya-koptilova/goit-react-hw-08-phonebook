{"version":3,"file":"static/js/92.c5f172e4.chunk.js","mappings":"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","sources":["redux/Contacts/contactsSelectors.js","redux/Filter/filerSelectors.js","components/Contacts/Contacts.jsx","components/Filter/Filter.jsx","components/ContactsForm/ContactsForm.jsx","pages/Contacts/ContactsPage.jsx","webpack://react-homework-template/./src/pages/AllPage.module.css?179e"],"sourcesContent":["export const selectContacts = state => state.contactsData.contacts;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/Contacts/contactsSelectors';\n\nexport const selectSearch = state => state.filterData.search;\nexport const selectFilterContacts = createSelector(\n  [selectContacts, selectSearch],\n  (contacts, search) =>\n    contacts.filter(el =>\n      el.name.toLowerCase().includes(search.toLowerCase().trim())\n    )\n);\n","import {\n  List,\n  ListIcon,\n  ListItem,\n  Text,\n  Button,\n  Divider,\n} from '@chakra-ui/react';\nimport { MdPerson, MdPersonOff } from 'react-icons/md';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilterContacts } from 'redux/Filter/filerSelectors';\nimport { deleteContact } from 'redux/Contacts/contactsOperations';\n\nfunction Contacts() {\n  const dispatch = useDispatch();\n  const filterContact = useSelector(selectFilterContacts);\n\n  const onDelete = id => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      <List spacing={10} boxShadow=\"lg\" p=\"6\" rounded=\"md\" bg=\"white\" pt={10}>\n        {filterContact.map(({ name, id, number }) => {\n          return (\n            <div key={id}>\n              <ListItem\n                display=\"flex\"\n                justifyContent=\"space-between\"\n                alignItems=\"center\"\n                mb={10}\n              >\n                <Text>\n                  <ListIcon as={MdPerson} w={6} h={6} color=\"green.500\" />\n                  {name}: {number}\n                </Text>\n                <Button\n                  leftIcon={<MdPersonOff />}\n                  ml={5}\n                  colorScheme=\"blue\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  type=\"button\"\n                  onClick={() => onDelete(id)}\n                >\n                  Delete\n                </Button>\n              </ListItem>\n              <Divider />\n            </div>\n          );\n        })}\n      </List>\n    </>\n  );\n}\n\nexport default Contacts;\n","import { Text, Input } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectSearch } from 'redux/Filter/filerSelectors';\nimport { searchContact } from 'redux/Filter/filterSlice';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const search = useSelector(selectSearch);\n\n  const onSearch = event => {\n    const value = event.target.value;\n    dispatch(searchContact(value));\n  };\n\n  return (\n    <div>\n      <Text fontSize=\"xl\" textAlign=\"center\">\n        Find contacts by name:\n      </Text>\n      <Input\n        w={350}\n        mb={10}\n        mt={3}\n        type=\"text\"\n        name=\"filterTerm\"\n        value={search}\n        onChange={onSearch}\n      />\n    </div>\n  );\n}\n\nexport default Filter;\n","import React, { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport {\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n  Text,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { EditIcon, PhoneIcon } from '@chakra-ui/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/Contacts/contactsSelectors';\nimport { addContact } from 'redux/Contacts/contactsOperations';\n\nconst ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [userName, setUserName] = useState('');\n  const [userTel, setUserTel] = useState('');\n\n  const onNameChange = event => {\n    const newName = event.target.value;\n    setUserName(newName);\n  };\n\n  const onTelChange = event => {\n    const newTel = event.target.value;\n    setUserTel(newTel);\n  };\n\n  const onAddClick = event => {\n    event.preventDefault();\n    const contact = {\n      id: nanoid(),\n      name: userName,\n      number: userTel,\n    };\n    if (contacts.some(el => el.name === contact.name)) {\n      alert(`${contact.name} is already in contacts!`);\n      return;\n    }\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setUserName('');\n    setUserTel('');\n  };\n\n  return (\n    <form onSubmit={onAddClick}>\n      <FormControl\n        border=\"1px\"\n        borderColor=\"gray.200\"\n        w={450}\n        p={10}\n        mb={10}\n        align=\"center\"\n        boxShadow=\"lg\"\n        rounded=\"md\"\n        bg=\"white\"\n      >\n        <FormLabel>\n          <Text as=\"b\">Name</Text>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              top={2}\n              left={0.5}\n              children={<EditIcon color=\"gray.300\" w={4} h={4} />}\n            />\n            <Input\n              mb={5}\n              mt={2}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              placeholder=\"Sirius Black\"\n              required\n              onChange={onNameChange}\n              value={userName}\n            />\n          </InputGroup>\n          <Text as=\"b\">Number</Text>\n          <InputGroup>\n            <InputLeftElement\n              pointerEvents=\"none\"\n              top={2}\n              left={0.5}\n              children={<PhoneIcon color=\"gray.300\" w={4} h={4} />}\n            />\n            <Input\n              mt={2}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              placeholder=\"256-148-256\"\n              required\n              value={userTel}\n              onChange={onTelChange}\n            />\n          </InputGroup>\n        </FormLabel>\n        <Button mt={5} type=\"submit\">\n          Add contact\n        </Button>\n      </FormControl>\n    </form>\n  );\n};\n\nexport default ContactsForm;\n","import React, { useEffect } from 'react';\nimport { Heading } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/Contacts/contactsSelectors';\nimport { selectFilterContacts } from 'redux/Filter/filerSelectors';\nimport { selectIsLoggedIn } from 'redux/User/userSelectors';\nimport { fetchContacts } from 'redux/Contacts/contactsOperations';\nimport Contacts from 'components/Contacts/Contacts';\nimport Filter from 'components/Filter/Filter';\nimport ContactsForm from 'components/ContactsForm/ContactsForm';\nimport css from '../AllPage.module.css';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contact = useSelector(selectContacts);\n  const filterContacts = useSelector(selectFilterContacts);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      dispatch(fetchContacts());\n      return;\n    }\n    return;\n  }, [dispatch, isLoggedIn]);\n\n  return (\n    <div className={css.container}>\n      <Heading>Add your contacts here</Heading>\n      <ContactsForm />\n      <Heading>Contacts</Heading>\n      {contact.length > 0 && <Filter />}\n      {contact.length > 0 && filterContacts.length > 0 && <Contacts />}\n      {contact.length > 0 && filterContacts.length <= 0 && (\n        <p>No contacts with this name!</p>\n      )}\n      {contact.length <= 0 && <p>You don't have any contacts yet!</p>}\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AllPage_container__Dr104\"};"],"names":["selectContacts","state","contactsData","contacts","selectSearch","filterData","search","selectFilterContacts","createSelector","filter","el","name","toLowerCase","includes","trim","dispatch","useDispatch","filterContact","useSelector","spacing","boxShadow","p","rounded","bg","pt","map","id","number","display","justifyContent","alignItems","mb","as","MdPerson","w","h","color","leftIcon","ml","colorScheme","variant","size","type","onClick","deleteContact","onDelete","fontSize","textAlign","I","mt","value","onChange","event","target","searchContact","useState","userName","setUserName","userTel","setUserTel","reset","onSubmit","preventDefault","contact","nanoid","some","alert","addContact","border","borderColor","align","pointerEvents","top","left","children","pattern","title","placeholder","required","newName","newTel","filterContacts","isLoggedIn","selectIsLoggedIn","useEffect","fetchContacts","className","css","length"],"sourceRoot":""}